// File: EmployeeMapper.kt
package com.example.employee_management.mapper

import com.example.employee_management.dto.EmployeeRequestDTO
import com.example.employee_management.dto.EmployeeResponseDTO
import com.example.employee_management.model.Employee
import org.springframework.stereotype.Component
import java.util.*

@Component
class EmployeeMapper {

    fun toEntity(dto: EmployeeRequestDTO): Employee {
        return Employee(
            microsoftId = dto.microsoftId,
            firstName = dto.firstName,
            lastName = dto.lastName,
            middleName = dto.middleName,
            dateOfBirth = dto.dateOfBirth,
            gender = dto.gender,
            nationality = dto.nationality,
            maritalStatus = dto.maritalStatus,
            photoPath = dto.photoPath,
            workEmail = dto.workEmail,
            personalEmail = dto.personalEmail,
            mobileNumber = dto.mobileNumber,
            alternatePhoneNumber = dto.alternatePhoneNumber,
            currentAddress = dto.currentAddress,
            permanentAddress = dto.permanentAddress,
            emergencyContactName = dto.emergencyContactName,
            emergencyContactNumber = dto.emergencyContactNumber,
            jobTitle = dto.jobTitle,
            department = dto.department,
            managerName = dto.managerName,
            dateOfJoining = dto.dateOfJoining,
            employmentType = dto.employmentType,
            employeeStatus = dto.employeeStatus,
            workMode = dto.workMode,
            officeLocation = dto.officeLocation,
            employeeCode = dto.employeeCode,
            skills = dto.skills,
            certifications = dto.certifications,
            education = dto.education,
            previousExperience = dto.previousExperience,
            projects = dto.projects,
            languagesKnown = dto.languagesKnown,
            linkedInUrl = dto.linkedInUrl,
            githubUrl = dto.githubUrl,
            portfolioUrl = dto.portfolioUrl,
            salary = dto.salary,
            bankAccountNumber = dto.bankAccountNumber,
            panNumber = dto.panNumber,
            pfNumber = dto.pfNumber,
            insuranceDetails = dto.insuranceDetails,
            bonusAmount = dto.bonusAmount,
            attendanceRecord = dto.attendanceRecord,
            leaveBalance = dto.leaveBalance,
            leaveHistory = dto.leaveHistory,
            shiftTiming = dto.shiftTiming,
            performanceRating = dto.performanceRating,
            appraisalHistory = dto.appraisalHistory,
            goals = dto.goals,
            trainingsAttended = dto.trainingsAttended,
            resumePath = dto.resumePath,
            offerLetterPath = dto.offerLetterPath,
            experienceLettersPath = dto.experienceLettersPath,
            idProofPath = dto.idProofPath,
            addressProofPath = dto.addressProofPath,
            systemUsername = dto.systemUsername,
            systemRole = dto.systemRole,
            badgeId = dto.badgeId,
            bloodGroup = dto.bloodGroup,
            tShirtSize = dto.tShirtSize,
            hobbies = dto.hobbies,
            vehicleDetails = dto.vehicleDetails,
            remarks = dto.remarks,
            aadhaarNumber = dto.aadhaarNumber,
            active = dto.active
        )
    }

    fun toResponseDto(employee: Employee): EmployeeResponseDTO {
        return EmployeeResponseDTO(
            id = employee.id,
            employeeId = employee.employeeId,
            microsoftId = employee.microsoftId,
            firstName = employee.firstName,
            lastName = employee.lastName,
            middleName = employee.middleName,
            dateOfBirth = employee.dateOfBirth,
            gender = employee.gender,
            nationality = employee.nationality,
            maritalStatus = employee.maritalStatus,
            photoPath = employee.photoPath,
            workEmail = employee.workEmail,
            personalEmail = employee.personalEmail,
            mobileNumber = employee.mobileNumber,
            alternatePhoneNumber = employee.alternatePhoneNumber,
            currentAddress = employee.currentAddress,
            permanentAddress = employee.permanentAddress,
            emergencyContactName = employee.emergencyContactName,
            emergencyContactNumber = employee.emergencyContactNumber,
            jobTitle = employee.jobTitle,
            department = employee.department,
            managerName = employee.managerName,
            dateOfJoining = employee.dateOfJoining,
            employmentType = employee.employmentType,
            employeeStatus = employee.employeeStatus,
            workMode = employee.workMode,
            officeLocation = employee.officeLocation,
            employeeCode = employee.employeeCode,
            skills = employee.skills,
            certifications = employee.certifications,
            education = employee.education,
            previousExperience = employee.previousExperience,
            projects = employee.projects,
            languagesKnown = employee.languagesKnown,
            linkedInUrl = employee.linkedInUrl,
            githubUrl = employee.githubUrl,
            portfolioUrl = employee.portfolioUrl,
            salary = employee.salary,
            bankAccountNumber = employee.bankAccountNumber,
            panNumber = employee.panNumber,
            pfNumber = employee.pfNumber,
            insuranceDetails = employee.insuranceDetails,
            bonusAmount = employee.bonusAmount,
            attendanceRecord = employee.attendanceRecord,
            leaveBalance = employee.leaveBalance,
            leaveHistory = employee.leaveHistory,
            shiftTiming = employee.shiftTiming,
            performanceRating = employee.performanceRating,
            appraisalHistory = employee.appraisalHistory,
            goals = employee.goals,
            trainingsAttended = employee.trainingsAttended,
            resumePath = employee.resumePath,
            offerLetterPath = employee.offerLetterPath,
            experienceLettersPath = employee.experienceLettersPath,
            idProofPath = employee.idProofPath,
            addressProofPath = employee.addressProofPath,
            systemUsername = employee.systemUsername,
            systemRole = employee.systemRole,
            badgeId = employee.badgeId,
            bloodGroup = employee.bloodGroup,
            tShirtSize = employee.tShirtSize,
            hobbies = employee.hobbies,
            vehicleDetails = employee.vehicleDetails,
            remarks = employee.remarks,
            aadhaarNumber = employee.aadhaarNumber,
            active = employee.active
        )
    }
}